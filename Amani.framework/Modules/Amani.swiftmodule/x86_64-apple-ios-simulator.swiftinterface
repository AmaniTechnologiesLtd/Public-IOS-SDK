// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -Onone -module-name Amani
import AVFoundation
import Alamofire
@_exported import Amani
import CommonCrypto
import CoreLocation
import CoreNFC
import CoreVideo
import CryptoKit
import Foundation
import MobileCoreServices
import OpenSSL
import Swift
import UIKit
import WebKit
import iProgressHUD
public struct CustomerRequestModel : Swift.Codable {
  public var name: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var idCardNumber: Swift.String?
  public init(name: Swift.String, email: Swift.String, phone: Swift.String, idCardNumber: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public enum PassportTagError : Swift.Error {
  case responseError(Swift.UInt8, Swift.UInt8)
}
@available(iOS 13, *)
extension PassportTagError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public enum TagError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
}
@available(iOS 13, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> Amani.DataGroupId
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [Amani.DataGroupId]
  public static var allCases: [Amani.DataGroupId] {
    get
  }
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@available(iOS 13, *)
public class TagReader {
  @objc deinit
}
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Amani.CertificateType, b: Amani.CertificateType) -> Swift.Bool
}
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class X509Wrapper {
  final public let cert: Swift.UnsafeMutablePointer<OpenSSL.X509>
  public init?(with cert: Swift.UnsafeMutablePointer<OpenSSL.X509>?)
  public func getItemsAsDict() -> [Amani.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
@available(iOS 13, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(Amani.DataGroupId, Swift.Int)
  case error(Amani.TagError)
  case successfulRead
}
@available(iOS 13, *)
extension NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public init(masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func readPassport(mrzKey: Swift.String, tags: [Amani.DataGroupId] = [], skipSecureElements: Swift.Bool = true, customDisplayMessage: ((Amani.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (Amani.NFCPassportModel?, Amani.TagError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13, *)
extension PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: Amani.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (Amani.TagError?) -> ())
  public func sessionKeys(data: [Swift.UInt8]) -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
@available(iOS 13, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@available(iOS 13, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var personalNumber: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var documentSigningCertificate: Amani.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: Amani.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [Amani.DataGroupId] {
    get
    }
  public var dataGroupsRead: [Amani.DataGroupId : Amani.DataGroup] {
    get
    }
  public var dataGroupHashes: [Amani.DataGroupId : Amani.DataGroupHash] {
    get
    }
  public var passportCorrectlySigned: Swift.Bool {
    get
    }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
    }
  public var passportDataNotTampered: Swift.Bool {
    get
    }
  public var activeAuthenticationPassed: Swift.Bool {
    get
    }
  public var verificationErrors: [Swift.Error] {
    get
    }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public func addDataGroup(_ id: Amani.DataGroupId, dataGroup: Amani.DataGroup)
  public func getDataGroup(_ id: Amani.DataGroupId) -> Amani.DataGroup?
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [Amani.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class Log {
  public static var logLevel: Amani.LogLevel
  public class func verbose(_ msg: Swift.String)
  public class func debug(_ msg: Swift.String)
  public class func info(_ msg: Swift.String)
  public class func warning(_ msg: Swift.String)
  public class func error(_ msg: Swift.String)
  @objc deinit
}
public func binToHexRep(_ val: [Swift.UInt8]) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8]) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func mac(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
public struct CustomerDetailModel : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@objc final public class AmaniSDK : ObjectiveC.NSObject {
  public static var sharedInstance: Amani.AmaniSDK
  final public func set(server: Swift.String = "https://demo.amani.ai", userName: Swift.String = "demo@zorluenerji.com", password: Swift.String = "123456", customer: Amani.CustomerRequestModel)
  final public func showSDK(overParent parentViewController: UIKit.UIViewController)
  @objc deinit
}
public struct ClientInfoModel {
  public var serverURL: Swift.String!
  public var appKey: Swift.String!
  public var appPwd: Swift.String!
  public var customer: Amani.CustomerRequestModel!
  public init(serverURL: Swift.String, appKey: Swift.String, appPwd: Swift.String, customer: Amani.CustomerRequestModel)
}
@available(iOS 13, *)
public class DataGroup {
  public var datagroupType: Amani.DataGroupId
  public var body: [Swift.UInt8] {
    get
    }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, *)
public class NotImplementedDG : Amani.DataGroup {
  @objc deinit
}
@available(iOS 13, *)
public class COM : Amani.DataGroup {
  public var version: Swift.String {
    get
    }
  public var unicodeVersion: Swift.String {
    get
    }
  public var dataGroupsPresent: [Swift.String] {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup1 : Amani.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup2 : Amani.DataGroup {
  public var nrImages: Swift.Int {
    get
    }
  public var versionNumber: Swift.Int {
    get
    }
  public var lengthOfRecord: Swift.Int {
    get
    }
  public var numberOfFacialImages: Swift.Int {
    get
    }
  public var facialRecordDataLength: Swift.Int {
    get
    }
  public var nrFeaturePoints: Swift.Int {
    get
    }
  public var gender: Swift.Int {
    get
    }
  public var eyeColor: Swift.Int {
    get
    }
  public var hairColor: Swift.Int {
    get
    }
  public var featureMask: Swift.Int {
    get
    }
  public var expression: Swift.Int {
    get
    }
  public var poseAngle: Swift.Int {
    get
    }
  public var poseAngleUncertainty: Swift.Int {
    get
    }
  public var faceImageType: Swift.Int {
    get
    }
  public var imageDataType: Swift.Int {
    get
    }
  public var imageWidth: Swift.Int {
    get
    }
  public var imageHeight: Swift.Int {
    get
    }
  public var imageColorSpace: Swift.Int {
    get
    }
  public var sourceType: Swift.Int {
    get
    }
  public var deviceType: Swift.Int {
    get
    }
  public var quality: Swift.Int {
    get
    }
  public var imageData: [Swift.UInt8] {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup7 : Amani.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup11 : Amani.DataGroup {
  public var fullName: Swift.String? {
    get
    }
  public var personalNumber: Swift.String? {
    get
    }
  public var dateOfBirth: Swift.String? {
    get
    }
  public var placeOfBirth: Swift.String? {
    get
    }
  public var address: Swift.String? {
    get
    }
  public var telephone: Swift.String? {
    get
    }
  public var profession: Swift.String? {
    get
    }
  public var title: Swift.String? {
    get
    }
  public var personalSummary: Swift.String? {
    get
    }
  public var proofOfCitizenship: Swift.String? {
    get
    }
  public var tdNumbers: Swift.String? {
    get
    }
  public var custodyInfo: Swift.String? {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup12 : Amani.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
    }
  public var dateOfIssue: Swift.String? {
    get
    }
  public var otherPersonsDetails: Swift.String? {
    get
    }
  public var endorsementsOrObservations: Swift.String? {
    get
    }
  public var taxOrExitRequirements: Swift.String? {
    get
    }
  public var frontImage: [Swift.UInt8]? {
    get
    }
  public var rearImage: [Swift.UInt8]? {
    get
    }
  public var personalizationTime: Swift.String? {
    get
    }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup14 : Amani.DataGroup {
  @objc deinit
}
@available(iOS 13, *)
public class DataGroup15 : Amani.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
    }
  public var ecdsaPublicKey: Swift.UnsafeMutablePointer<OpenSSL.EVP_PKEY>? {
    get
    }
  @objc deinit
}
@available(iOS 13, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case UnableToGetSignedDataFromPKCS7(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case UnableToParseASN1(Swift.String)
}
extension OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
